{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true,
      "authorship_tag": "ABX9TyPTlG2cfgDwmT5dS5A/RQtV",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Vinicin070/clinica/blob/main/clinica\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from flask import Flask, request, jsonify\n",
        "import re\n",
        "\n",
        "app = Flask(__name__)\n",
        "\n",
        "def is_strong_password(password):\n",
        "    if len(password) < 8:\n",
        "        return False\n",
        "    if not re.search(r'[A-Z]', password):\n",
        "        return False\n",
        "    if not re.search(r'[a-z]', password):\n",
        "        return False\n",
        "    if not re.search(r'[0-9]', password):\n",
        "        return False\n",
        "    if not re.search(r'[!@#$%^&*(),.?\":{}|<>]', password):\n",
        "        return False\n",
        "    return True\n",
        "\n",
        "@app.route('/signup', methods=['POST'])\n",
        "def signup():\n",
        "    data = request.json\n",
        "\n",
        "    if 'username' not in data or 'password' not in data:\n",
        "        return jsonify({'error': 'Missing username or password'}), 400\n",
        "\n",
        "    username = data['username']\n",
        "    password = data['password']\n",
        "\n",
        "    if not is_strong_password(password):\n",
        "        return jsonify({'error': 'Password is not strong enough. It must be at least 8 characters long, include uppercase and lowercase letters, a number, and a special character.'}), 400\n",
        "\n",
        "    return jsonify({'message': f'User {username} created successfully!'}), 201\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    app.run(debug=True)"
      ],
      "metadata": {
        "id": "bAtAPxF4VBfL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def gerar_senhas():\n",
        "    fila_original = []\n",
        "    fila_preferenciais = []\n",
        "\n",
        "    print(\"Digite até 10 atendimentos (P para preferencial, N para normal):\")\n",
        "\n",
        "    for i in range(10):\n",
        "        while True:\n",
        "            tipo = input(f\"{i+1:02d}º paciente (P/N ou Enter para parar): \").strip().upper()\n",
        "\n",
        "            if tipo == \"\":\n",
        "                print(\"Entrada finalizada pelo usuário.\")\n",
        "                break\n",
        "            elif tipo in ['P', 'N']:\n",
        "                senha = f\"{i+1:02d} - {tipo}\"\n",
        "                fila_original.append(senha)\n",
        "                if tipo == 'P':\n",
        "                    fila_preferenciais.append(senha)\n",
        "                else:\n",
        "                    [].append(senha)\n",
        "                break\n",
        "            else:\n",
        "                print(\"Entrada inválida. Digite apenas 'P', 'N' ou Enter para encerrar.\")\n",
        "\n",
        "        if tipo == \"\":\n",
        "            break\n",
        "\n",
        "    fila_organizada = fila_preferenciais + []\n",
        "    print(\"\\n=== Fila Original ===\")\n",
        "    for senha in fila_original:\n",
        "        print(senha)\n",
        "\n",
        "    print(\"\\n=== Fila Organizada (Preferenciais primeiro) ===\")\n",
        "    for senha in fila_organizada:\n",
        "        print(senha)\n",
        "\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    gerar_senhas()"
      ],
      "metadata": {
        "id": "3aU3UKg7VFsZ"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}